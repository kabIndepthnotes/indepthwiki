# hash_table

<!-- visits: 4 -->

# hash_table
see https://github.com/jamesroutley/write-a-hash-table/tree/master/01-introduction#api

# Associative Array
search(a, k): return the value v associated with key k from the associative array a.
insert(a, k, v): store the pair k:v in the associative array a.

delete(a, k): delete the k:v pair associated with k.

associateive array `:=` map `:=` symbol tabl `:=` dictionary

# Hash table
A fast Associative Array which uses a hash function.
hash table `:=` hash ma `:=` ma `:=` has `:=` dictionary

# hash function
- Take a string as its imput and return a number between `0` and `m`, our desired bucket array length.
- Return an even distribution of bucket indexes for an average set of inputs. Without even distribution, more collisions occur.

# pathological data
- If a set of inputs all hash to the same value, this causes collisions, which could be used by a malicious user to do ddos.

[c](c___20250304_1142_20.pd)

